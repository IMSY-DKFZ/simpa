# SPDX-FileCopyrightText: 2021 Computer Assisted Medical Interventions Group, DKFZ
# SPDX-FileCopyrightText: 2021 Janek Groehl
# SPDX-License-Identifier: MIT
import numpy as np

from simpa.core.device_digital_twins import DetectionGeometryBase
from simpa.utils import Tags


class iTheraInvision256TFDetectionGeometry(DetectionGeometryBase):
    """
    This class represents a digital twin of a ultrasound detection device
    with a curved detection geometry. The origin for this device is the center (focus) of the curved array.
    """

    def __init__(self,
                 device_position_mm=None,
                 field_of_view_extent_mm=None):
        """

        :param pitch_mm: In-plane distance between the beginning of one detector element to the next detector element.
        :param radius_mm:
        :param number_detector_elements:
        :param detector_element_width_mm:
        :param detector_element_length_mm:
        :param center_frequency_hz:
        :param bandwidth_percent:
        :param sampling_frequency_mhz:
        :param angular_origin_offset:
        :param device_position_mm: Center (focus) of the curved array.
        """

        super(iTheraInvision256TFDetectionGeometry, self).__init__(
             number_detector_elements=256,
             detector_element_width_mm=0.635,
             detector_element_length_mm=15,
             center_frequency_hz=5e6,
             bandwidth_percent=55,
             sampling_frequency_mhz=40,
             device_position_mm=device_position_mm)

        self.positions = (np.asarray([[0.02890019, -0.02837304, 0.],
[0.02941755, -0.02783627, 0.],
[0.02992494, -0.02729007, 0.],
[0.03042219, -0.02673463, 0.],
[0.03090913, -0.02617013, 0.],
[0.0313856, -0.02559676, 0.],
[0.03185144, -0.02501472, 0.],
[0.03230648, -0.0244242, 0.],
[0.03275058, -0.0238254, 0.],
[0.03318357, -0.02321854, 0.],
[0.03360533, -0.0226038, 0.],
[0.0340157, -0.02198141, 0.],
[0.03441454, -0.02135156, 0.],
[0.03480172, -0.02071449, 0.],
[0.03517711, -0.02007039, 0.],
[0.03554058, -0.0194195, 0.],
[0.03589201, -0.01876202, 0.],
[0.03623128, -0.01809819, 0.],
[0.03655827, -0.01742822, 0.],
[0.03687287, -0.01675235, 0.],
[0.03717498, -0.0160708, 0.],
[0.03746449, -0.01538381, 0.],
[0.03774131, -0.01469161, 0.],
[0.03800534, -0.01399442, 0.],
[0.0382565, -0.0132925, 0.],
[0.03849469, -0.01258607, 0.],
[0.03871983, -0.01187538, 0.],
[0.03893186, -0.01116066, 0.],
[0.0391307, -0.01044216, 0.],
[0.03931627, -0.00972012, 0.],
[0.03948853, -0.00899479, 0.],
[0.0396474, -0.00826641, 0.],
[0.03979284, -0.00753523, 0.],
[0.0399248, -0.0068015, 0.],
[0.04004323, -0.00606546, 0.],
[0.04014809, -0.00532737, 0.],
[0.04023935, -0.00458747, 0.],
[0.04031697, -0.00384602, 0.],
[0.04038093, -0.00310327, 0.],
[0.04043121, -0.00235946, 0.],
[0.04046779, -0.00161485, 0.],
[0.04049066, -0.0008697, 0.],
[0.04049981, -0.00012425, 0.],
[0.04049524, 0.00062124, 0.],
[0.04047694, 0.00136652, 0.],
[0.04044493, 0.00211133, 0.],
[0.04039921, 0.00285544, 0.],
[0.04033981, 0.00359857, 0.],
[0.04026674, 0.00434048, 0.],
[0.04018002, 0.00508093, 0.],
[0.04007969, 0.00581965, 0.],
[0.03996578, 0.0065564, 0.],
[0.03983833, 0.00729093, 0.],
[0.03969738, 0.00802299, 0.],
[0.03954297, 0.00875233, 0.],
[0.03937517, 0.0094787, 0.],
[0.03919403, 0.01020186, 0.],
[0.03899961, 0.01092157, 0.],
[0.03879197, 0.01163757, 0.],
[0.03857119, 0.01234963, 0.],
[0.03833734, 0.01305751, 0.],
[0.0380905, 0.01376096, 0.],
[0.03783075, 0.01445975, 0.],
[0.03755818, 0.01515364, 0.],
[0.03727289, 0.0158424, 0.],
[0.03697497, 0.01652579, 0.],
[0.03666452, 0.01720358, 0.],
[0.03634165, 0.01787554, 0.],
[0.03600646, 0.01854144, 0.],
[0.03565907, 0.01920106, 0.],
[0.0352996, 0.01985417, 0.],
[0.03492817, 0.02050056, 0.],
[0.0345449, 0.02114, 0.],
[0.03414993, 0.02177228, 0.],
[0.03374339, 0.02239718, 0.],
[0.03332542, 0.02301449, 0.],
[0.03289615, 0.023624, 0.],
[0.03245573, 0.02422551, 0.],
[0.03200432, 0.02481881, 0.],
[0.03154207, 0.0254037, 0.],
[0.03106913, 0.02597998, 0.],
[0.03058566, 0.02654746, 0.],
[0.03009182, 0.02710594, 0.],
[0.02958779, 0.02765524, 0.],
[0.02907374, 0.02819517, 0.],
[0.02854983, 0.02872555, 0.],
[0.02801625, 0.02924619, 0.],
[0.02747318, 0.02975692, 0.],
[0.02692079, 0.03025757, 0.],
[0.02635929, 0.03074797, 0.],
[0.02578886, 0.03122795, 0.],
[0.02520968, 0.03169735, 0.],
[0.02462197, 0.03215601, 0.],
[0.02402591, 0.03260377, 0.],
[0.02342171, 0.03304048, 0.],
[0.02280957, 0.033466, 0.],
[0.02218971, 0.03388018, 0.],
[0.02156233, 0.03428288, 0.],
[0.02092764, 0.03467397, 0.],
[0.02028586, 0.0350533, 0.],
[0.0196372, 0.03542076, 0.],
[0.0189819, 0.03577622, 0.],
[0.01832016, 0.03611955, 0.],
[0.01765221, 0.03645064, 0.],
[0.01697828, 0.03676939, 0.],
[0.0162986, 0.03707567, 0.],
[0.0156134, 0.0373694, 0.],
[0.01492291, 0.03765046, 0.],
[0.01422736, 0.03791876, 0.],
[0.01352699, 0.03817421, 0.],
[0.01282203, 0.03841673, 0.],
[0.01211273, 0.03864624, 0.],
[0.01139933, 0.03886265, 0.],
[0.01068206, 0.03906589, 0.],
[0.00996118, 0.03925589, 0.],
[0.00923692, 0.03943259, 0.],
[0.00850953, 0.03959593, 0.],
[0.00777926, 0.03974586, 0.],
[0.00704635, 0.03988231, 0.],
[0.00631105, 0.04000526, 0.],
[0.00557361, 0.04011465, 0.],
[0.00483429, 0.04021044, 0.],
[0.00409333, 0.04029261, 0.],
[0.00335098, 0.04036113, 0.],
[0.0026075, 0.04041597, 0.],
[0.00186313, 0.04045712, 0.],
[0.00111813, 0.04048456, 0.],
[0.00037275, 0.04049828, 0.],
[-0.00037275, 0.04049828, 0.],
[-0.00111813, 0.04048456, 0.],
[-0.00186313, 0.04045712, 0.],
[-0.0026075, 0.04041597, 0.],
[-0.00335098, 0.04036113, 0.],
[-0.00409333, 0.04029261, 0.],
[-0.00483429, 0.04021044, 0.],
[-0.00557361, 0.04011465, 0.],
[-0.00631105, 0.04000526, 0.],
[-0.00704635, 0.03988231, 0.],
[-0.00777926, 0.03974586, 0.],
[-0.00850953, 0.03959593, 0.],
[-0.00923692, 0.03943259, 0.],
[-0.00996118, 0.03925589, 0.],
[-0.01068206, 0.03906589, 0.],
[-0.01139933, 0.03886265, 0.],
[-0.01211273, 0.03864624, 0.],
[-0.01282203, 0.03841673, 0.],
[-0.01352699, 0.03817421, 0.],
[-0.01422736, 0.03791876, 0.],
[-0.01492291, 0.03765046, 0.],
[-0.0156134, 0.0373694, 0.],
[-0.0162986, 0.03707567, 0.],
[-0.01697828, 0.03676939, 0.],
[-0.01765221, 0.03645064, 0.],
[-0.01832016, 0.03611955, 0.],
[-0.0189819, 0.03577622, 0.],
[-0.0196372, 0.03542076, 0.],
[-0.02028586, 0.0350533, 0.],
[-0.02092764, 0.03467397, 0.],
[-0.02156233, 0.03428288, 0.],
[-0.02218971, 0.03388018, 0.],
[-0.02280957, 0.033466, 0.],
[-0.02342171, 0.03304048, 0.],
[-0.02402591, 0.03260377, 0.],
[-0.02462197, 0.03215601, 0.],
[-0.02520968, 0.03169735, 0.],
[-0.02578886, 0.03122795, 0.],
[-0.02635929, 0.03074797, 0.],
[-0.02692079, 0.03025757, 0.],
[-0.02747318, 0.02975692, 0.],
[-0.02801625, 0.02924619, 0.],
[-0.02854983, 0.02872555, 0.],
[-0.02907374, 0.02819517, 0.],
[-0.02958779, 0.02765524, 0.],
[-0.03009182, 0.02710594, 0.],
[-0.03058566, 0.02654746, 0.],
[-0.03106913, 0.02597998, 0.],
[-0.03154207, 0.0254037, 0.],
[-0.03200432, 0.02481881, 0.],
[-0.03245573, 0.02422551, 0.],
[-0.03289615, 0.023624, 0.],
[-0.03332542, 0.02301449, 0.],
[-0.03374339, 0.02239718, 0.],
[-0.03414993, 0.02177228, 0.],
[-0.0345449, 0.02114, 0.],
[-0.03492817, 0.02050056, 0.],
[-0.0352996, 0.01985417, 0.],
[-0.03565907, 0.01920106, 0.],
[-0.03600646, 0.01854144, 0.],
[-0.03634165, 0.01787554, 0.],
[-0.03666452, 0.01720358, 0.],
[-0.03697497, 0.01652579, 0.],
[-0.03727289, 0.0158424, 0.],
[-0.03755818, 0.01515364, 0.],
[-0.03783075, 0.01445975, 0.],
[-0.0380905, 0.01376096, 0.],
[-0.03833734, 0.01305751, 0.],
[-0.03857119, 0.01234963, 0.],
[-0.03879197, 0.01163757, 0.],
[-0.03899961, 0.01092157, 0.],
[-0.03919403, 0.01020186, 0.],
[-0.03937517, 0.0094787, 0.],
[-0.03954297, 0.00875233, 0.],
[-0.03969738, 0.00802299, 0.],
[-0.03983833, 0.00729093, 0.],
[-0.03996578, 0.0065564, 0.],
[-0.04007969, 0.00581965, 0.],
[-0.04018002, 0.00508093, 0.],
[-0.04026674, 0.00434048, 0.],
[-0.04033981, 0.00359857, 0.],
[-0.04039921, 0.00285544, 0.],
[-0.04044493, 0.00211133, 0.],
[-0.04047694, 0.00136652, 0.],
[-0.04049524, 0.00062124, 0.],
[-0.04049981, -0.00012425, 0.],
[-0.04049066, -0.0008697, 0.],
[-0.04046779, -0.00161485, 0.],
[-0.04043121, -0.00235946, 0.],
[-0.04038093, -0.00310327, 0.],
[-0.04031697, -0.00384602, 0.],
[-0.04023935, -0.00458747, 0.],
[-0.04014809, -0.00532737, 0.],
[-0.04004323, -0.00606546, 0.],
[-0.0399248, -0.0068015, 0.],
[-0.03979284, -0.00753523, 0.],
[-0.0396474, -0.00826641, 0.],
[-0.03948853, -0.00899479, 0.],
[-0.03931627, -0.00972012, 0.],
[-0.0391307, -0.01044216, 0.],
[-0.03893186, -0.01116066, 0.],
[-0.03871983, -0.01187538, 0.],
[-0.03849469, -0.01258607, 0.],
[-0.0382565, -0.0132925, 0.],
[-0.03800534, -0.01399442, 0.],
[-0.03774131, -0.01469161, 0.],
[-0.03746449, -0.01538381, 0.],
[-0.03717498, -0.0160708, 0.],
[-0.03687287, -0.01675235, 0.],
[-0.03655827, -0.01742822, 0.],
[-0.03623128, -0.01809819, 0.],
[-0.03589201, -0.01876202, 0.],
[-0.03554058, -0.0194195, 0.],
[-0.03517711, -0.02007039, 0.],
[-0.03480172, -0.02071449, 0.],
[-0.03441454, -0.02135156, 0.],
[-0.0340157, -0.02198141, 0.],
[-0.03360533, -0.0226038, 0.],
[-0.03318357, -0.02321854, 0.],
[-0.03275058, -0.0238254, 0.],
[-0.03230648, -0.0244242, 0.],
[-0.03185144, -0.02501472, 0.],
[-0.0313856, -0.02559676, 0.],
[-0.03090913, -0.02617013, 0.],
[-0.03042219, -0.02673463, 0.],
[-0.02992494, -0.02729007, 0.],
[-0.02941755, -0.02783627, 0.],
[-0.02890019, -0.02837304, 0.]]) * 1000)[:, [0, 2, 1]]

        detector_positions = self.get_detector_element_positions_base_mm()
        min_x_coordinate = np.min(detector_positions[:, 0])
        max_x_coordinate = np.max(detector_positions[:, 0])
        self.probe_width_mm = max_x_coordinate - min_x_coordinate

        min_z_coordinate = np.min(detector_positions[:, 2])
        max_z_coordinate = np.max(detector_positions[:, 2])
        self.probe_height_mm = max_z_coordinate - min_z_coordinate

        if field_of_view_extent_mm is None:
            self.field_of_view_extent_mm = np.asarray([-self.probe_width_mm/2,
                                                       self.probe_width_mm/2,
                                                       0, 0, 0, 100])
        else:
            self.field_of_view_extent_mm = field_of_view_extent_mm

    def check_settings_prerequisites(self, global_settings) -> bool:
        if global_settings[Tags.DIM_VOLUME_Z_MM] < (self.probe_height_mm + 1):
            self.logger.error("Volume z dimension is too small to encompass the device in simulation!"
                              "Must be at least {} mm but was {} mm"
                              .format((self.probe_height_mm + 1),
                                      global_settings[Tags.DIM_VOLUME_Z_MM]))
            return False
        if global_settings[Tags.DIM_VOLUME_X_MM] < (self.probe_width_mm + 1):
            self.logger.error("Volume x dimension is too small to encompass MSOT device in simulation!"
                              "Must be at least {} mm but was {} mm"
                              .format(self.probe_width_mm, global_settings[Tags.DIM_VOLUME_X_MM]))
            return False
        return True

    def update_settings_for_use_of_model_based_volume_creator(self, global_settings):
        pass

    def get_detector_element_positions_base_mm(self) -> np.ndarray:

        return self.positions

    def get_detector_element_orientations(self) -> np.ndarray:
        detector_positions = self.get_detector_element_positions_base_mm()
        detector_orientations = np.subtract(0, detector_positions)
        norm = np.linalg.norm(detector_orientations, axis=-1)
        for dim in range(3):
            detector_orientations[:, dim] = detector_orientations[:, dim] / norm
        return detector_orientations

    def serialize(self) -> dict:
        serialized_device = self.__dict__
        return {"iTheraInvision256TFDetectionGeometry": serialized_device}

    @staticmethod
    def deserialize(dictionary_to_deserialize):
        deserialized_device = iTheraInvision256TFDetectionGeometry()
        for key, value in dictionary_to_deserialize.items():
            deserialized_device.__dict__[key] = value
        return deserialized_device
