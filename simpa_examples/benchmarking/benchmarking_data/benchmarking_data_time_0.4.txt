Timer unit: 1e-06 s

Total time: 4.93008 s
File: /home/f762e/Workspace/simpa/simpa_examples/linear_unmixing.py
Function: run_linear_unmixing at line 18

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    18                                           @profile
    19                                           def run_linear_unmixing(SPACING: Union[int, float] = 0.25, path_manager=sp.PathManager, visualise: bool = True):
    20                                               """
    21                                           
    22                                               :param SPACING: The simulation spacing between voxels
    23                                               :param path_manager: the path manager to be used, typically sp.PathManager
    24                                               :param visualise: If VISUALIZE is set to True, the reconstruction result will be plotted
    25                                               :return: a run through of the example
    26                                               """
    27                                               # TODO: Please make sure that a valid path_config.env file is located in your home directory, or that you
    28                                               # set global params characterizing the simulated volume
    29         1          0.5      0.5      0.0      VOLUME_TRANSDUCER_DIM_IN_MM = 75
    30         1          0.1      0.1      0.0      VOLUME_PLANAR_DIM_IN_MM = 20
    31         1          0.1      0.1      0.0      VOLUME_HEIGHT_IN_MM = 25
    32         1          0.1      0.1      0.0      RANDOM_SEED = 471
    33         1          0.6      0.6      0.0      VOLUME_NAME = "LinearUnmixingExample_" + str(RANDOM_SEED)
    34                                           
    35                                               # since we want to perform linear unmixing, the simulation pipeline should be execute for at least two wavelengths
    36         1          0.2      0.2      0.0      WAVELENGTHS = [750, 800, 850]
    37                                           
    38         1          0.3      0.3      0.0      def create_example_tissue():
    39                                                   """
    40                                                   This is a very simple example script of how to create a tissue definition.
    41                                                   It contains a muscular background, an epidermis layer on top of the muscles
    42                                                   and two blood vessels.
    43                                                   """
    44                                                   background_dictionary = sp.Settings()
    45                                                   background_dictionary[Tags.MOLECULE_COMPOSITION] = sp.TISSUE_LIBRARY.constant(1e-4, 1e-4, 0.9)
    46                                                   background_dictionary[Tags.STRUCTURE_TYPE] = Tags.BACKGROUND
    47                                           
    48                                                   muscle_dictionary = sp.Settings()
    49                                                   muscle_dictionary[Tags.PRIORITY] = 1
    50                                                   muscle_dictionary[Tags.STRUCTURE_START_MM] = [0, 0, 0]
    51                                                   muscle_dictionary[Tags.STRUCTURE_END_MM] = [0, 0, 100]
    52                                                   muscle_dictionary[Tags.MOLECULE_COMPOSITION] = sp.TISSUE_LIBRARY.muscle()
    53                                                   muscle_dictionary[Tags.CONSIDER_PARTIAL_VOLUME] = True
    54                                                   muscle_dictionary[Tags.ADHERE_TO_DEFORMATION] = True
    55                                                   muscle_dictionary[Tags.STRUCTURE_TYPE] = Tags.HORIZONTAL_LAYER_STRUCTURE
    56                                           
    57                                                   vessel_1_dictionary = sp.Settings()
    58                                                   vessel_1_dictionary[Tags.PRIORITY] = 3
    59                                                   vessel_1_dictionary[Tags.STRUCTURE_START_MM] = [VOLUME_TRANSDUCER_DIM_IN_MM/2,
    60                                                                                                   10,
    61                                                                                                   5]
    62                                                   vessel_1_dictionary[Tags.STRUCTURE_END_MM] = [VOLUME_TRANSDUCER_DIM_IN_MM/2,
    63                                                                                                 12,
    64                                                                                                 5]
    65                                                   vessel_1_dictionary[Tags.STRUCTURE_RADIUS_MM] = 3
    66                                                   vessel_1_dictionary[Tags.MOLECULE_COMPOSITION] = sp.TISSUE_LIBRARY.blood(oxygenation=0.99)
    67                                                   vessel_1_dictionary[Tags.CONSIDER_PARTIAL_VOLUME] = True
    68                                                   vessel_1_dictionary[Tags.STRUCTURE_TYPE] = Tags.CIRCULAR_TUBULAR_STRUCTURE
    69                                           
    70                                                   vessel_2_dictionary = sp.Settings()
    71                                                   vessel_2_dictionary[Tags.PRIORITY] = 3
    72                                                   vessel_2_dictionary[Tags.STRUCTURE_START_MM] = [VOLUME_TRANSDUCER_DIM_IN_MM/3,
    73                                                                                                   10,
    74                                                                                                   5]
    75                                                   vessel_2_dictionary[Tags.STRUCTURE_END_MM] = [VOLUME_TRANSDUCER_DIM_IN_MM/3,
    76                                                                                                 12,
    77                                                                                                 5]
    78                                                   vessel_2_dictionary[Tags.STRUCTURE_RADIUS_MM] = 2
    79                                                   vessel_2_dictionary[Tags.MOLECULE_COMPOSITION] = sp.TISSUE_LIBRARY.blood(oxygenation=0.75)
    80                                                   vessel_2_dictionary[Tags.CONSIDER_PARTIAL_VOLUME] = True
    81                                                   vessel_2_dictionary[Tags.STRUCTURE_TYPE] = Tags.CIRCULAR_TUBULAR_STRUCTURE
    82                                           
    83                                                   epidermis_dictionary = sp.Settings()
    84                                                   epidermis_dictionary[Tags.PRIORITY] = 8
    85                                                   epidermis_dictionary[Tags.STRUCTURE_START_MM] = [0, 0, 0]
    86                                                   epidermis_dictionary[Tags.STRUCTURE_END_MM] = [0, 0, 0.1]
    87                                                   epidermis_dictionary[Tags.MOLECULE_COMPOSITION] = sp.TISSUE_LIBRARY.epidermis()
    88                                                   epidermis_dictionary[Tags.CONSIDER_PARTIAL_VOLUME] = True
    89                                                   epidermis_dictionary[Tags.ADHERE_TO_DEFORMATION] = True
    90                                                   epidermis_dictionary[Tags.STRUCTURE_TYPE] = Tags.HORIZONTAL_LAYER_STRUCTURE
    91                                           
    92                                                   tissue_dict = sp.Settings()
    93                                                   tissue_dict[Tags.BACKGROUND] = background_dictionary
    94                                                   tissue_dict["muscle"] = muscle_dictionary
    95                                                   tissue_dict["epidermis"] = epidermis_dictionary
    96                                                   tissue_dict["vessel_1"] = vessel_1_dictionary
    97                                                   tissue_dict["vessel_2"] = vessel_2_dictionary
    98                                                   return tissue_dict
    99                                           
   100                                           
   101                                               # Seed the numpy random configuration prior to creating the global_settings file in
   102                                               # order to ensure that the same volume is generated with the same random seed every time.
   103         1         16.0     16.0      0.0      np.random.seed(RANDOM_SEED)
   104                                           
   105                                               # Initialize global settings and prepare for simulation pipeline including
   106                                               # volume creation and optical forward simulation.
   107         1          1.5      1.5      0.0      general_settings = {
   108                                                   # These parameters set the general properties of the simulated volume
   109         1          1.0      1.0      0.0          Tags.RANDOM_SEED: RANDOM_SEED,
   110         1          0.5      0.5      0.0          Tags.VOLUME_NAME: VOLUME_NAME,
   111         1         54.7     54.7      0.0          Tags.SIMULATION_PATH: path_manager.get_hdf5_file_save_path(),
   112         1          0.4      0.4      0.0          Tags.SPACING_MM: SPACING,
   113         1          0.5      0.5      0.0          Tags.DIM_VOLUME_Z_MM: VOLUME_HEIGHT_IN_MM,
   114         1          0.2      0.2      0.0          Tags.DIM_VOLUME_X_MM: VOLUME_TRANSDUCER_DIM_IN_MM,
   115         1          0.3      0.3      0.0          Tags.DIM_VOLUME_Y_MM: VOLUME_PLANAR_DIM_IN_MM,
   116         1          0.3      0.3      0.0          Tags.WAVELENGTHS: WAVELENGTHS,
   117         1          0.5      0.5      0.0          Tags.GPU: True,
   118         1          0.3      0.3      0.0          Tags.DO_FILE_COMPRESSION: True
   119                                               }
   120         1         69.9     69.9      0.0      settings = sp.Settings(general_settings)
   121         2          6.5      3.2      0.0      settings.set_volume_creation_settings({
   122         1          0.4      0.4      0.0          Tags.SIMULATE_DEFORMED_LAYERS: True,
   123         1      31044.7  31044.7      0.6          Tags.STRUCTURES: create_example_tissue()
   124                                               })
   125         2          7.3      3.7      0.0      settings.set_optical_settings({
   126         1          0.4      0.4      0.0          Tags.OPTICAL_MODEL_NUMBER_PHOTONS: 1e7,
   127         1         36.6     36.6      0.0          Tags.OPTICAL_MODEL_BINARY_PATH: path_manager.get_mcx_binary_path(),
   128         1          0.6      0.6      0.0          Tags.OPTICAL_MODEL: Tags.OPTICAL_MODEL_MCX,
   129         1          0.2      0.2      0.0          Tags.LASER_PULSE_ENERGY_IN_MILLIJOULE: 50
   130                                               })
   131                                           
   132                                               # Set component settings for linear unmixing.
   133                                               # In this example we are only interested in the chromophore concentration of oxy- and deoxyhemoglobin and the
   134                                               # resulting blood oxygen saturation. We want to perform the algorithm using all three wavelengths defined above.
   135                                               # Please take a look at the component for more information.
   136         1         60.4     60.4      0.0      settings["linear_unmixing"] = {
   137         1          0.7      0.7      0.0          Tags.DATA_FIELD: Tags.DATA_FIELD_INITIAL_PRESSURE,
   138         1          0.2      0.2      0.0          Tags.WAVELENGTHS: WAVELENGTHS,
   139         2       1961.6    980.8      0.0          Tags.LINEAR_UNMIXING_SPECTRA: sp.get_simpa_internal_absorption_spectra_by_names(
   140         1          0.4      0.4      0.0              [Tags.SIMPA_NAMED_ABSORPTION_SPECTRUM_OXYHEMOGLOBIN, Tags.SIMPA_NAMED_ABSORPTION_SPECTRUM_DEOXYHEMOGLOBIN]
   141                                                   ),
   142         1          0.5      0.5      0.0          Tags.LINEAR_UNMIXING_COMPUTE_SO2: True,
   143         1          0.3      0.3      0.0          Tags.LINEAR_UNMIXING_NON_NEGATIVE: True
   144                                               }
   145                                           
   146                                               # Get device for simulation
   147         2        141.7     70.9      0.0      device = sp.MSOTAcuityEcho(device_position_mm=np.array([VOLUME_TRANSDUCER_DIM_IN_MM/2,
   148         1          0.1      0.1      0.0                                                              VOLUME_PLANAR_DIM_IN_MM/2,
   149         1          0.1      0.1      0.0                                                              0]))
   150         1       4495.9   4495.9      0.1      device.update_settings_for_use_of_model_based_volume_creator(settings)
   151                                           
   152                                               # Run simulation pipeline for all wavelengths in Tag.WAVELENGTHS
   153         1          0.2      0.2      0.0      pipeline = [
   154         1      14382.3  14382.3      0.3          sp.ModelBasedVolumeCreationAdapter(settings),
   155         1         13.3     13.3      0.0          sp.MCXAdapter(settings),
   156         1        146.7    146.7      0.0          sp.FieldOfViewCropping(settings),
   157                                               ]
   158         1    3958047.6    4e+06     80.3      sp.simulate(pipeline, settings, device)
   159                                           
   160                                               # Run linear unmixing component with above specified settings.
   161         1     917597.9 917597.9     18.6      sp.LinearUnmixing(settings, "linear_unmixing").run()
   162                                           
   163                                               # Load linear unmixing result (blood oxygen saturation) and reference absorption for first wavelength.
   164         1         56.3     56.3      0.0      file_path = path_manager.get_hdf5_file_save_path() + "/" + VOLUME_NAME + ".hdf5"
   165         1        825.0    825.0      0.0      lu_results = sp.load_data_field(file_path, Tags.LINEAR_UNMIXING_RESULT)
   166         1          0.3      0.3      0.0      sO2 = lu_results["sO2"]
   167                                           
   168         1        328.3    328.3      0.0      mua = sp.load_data_field(file_path, Tags.DATA_FIELD_ABSORPTION_PER_CM, wavelength=WAVELENGTHS[0])
   169         1        477.8    477.8      0.0      p0 = sp.load_data_field(file_path, Tags.DATA_FIELD_INITIAL_PRESSURE, wavelength=WAVELENGTHS[0])
   170         1        298.7    298.7      0.0      gt_oxy = sp.load_data_field(file_path, Tags.DATA_FIELD_OXYGENATION, wavelength=WAVELENGTHS[0])
   171                                           
   172                                               # Visualize linear unmixing result
   173         1          0.2      0.2      0.0      if visualise:
   174                                                   visualise_data(path_to_hdf5_file=path_manager.get_hdf5_file_save_path() + "/" + VOLUME_NAME + ".hdf5",
   175                                                                  wavelength=WAVELENGTHS[0],
   176                                                                  show_initial_pressure=True,
   177                                                                  show_oxygenation=True,
   178                                                                  show_linear_unmixing_sO2=True)

Total time: 2.86975 s
File: /home/f762e/Workspace/simpa/simpa_examples/minimal_optical_simulation.py
Function: run_minimal_optical_simulation at line 19

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    19                                           @profile
    20                                           def run_minimal_optical_simulation(SPACING: Union[int, float] = 0.5, path_manager=sp.PathManager(), visualise: bool = True):
    21                                               """
    22                                           
    23                                               :param SPACING: The simulation spacing between voxels
    24                                               :param path_manager: the path manager to be used, typically sp.PathManager
    25                                               :param visualise: If VISUALIZE is set to True, the reconstruction result will be plotted
    26                                               :return: a run through of the example
    27                                               """
    28         1          0.3      0.3      0.0      VOLUME_TRANSDUCER_DIM_IN_MM = 60
    29         1          0.1      0.1      0.0      VOLUME_PLANAR_DIM_IN_MM = 30
    30         1          0.1      0.1      0.0      VOLUME_HEIGHT_IN_MM = 60
    31         1          0.3      0.3      0.0      RANDOM_SEED = 471
    32         1          0.6      0.6      0.0      VOLUME_NAME = "MyVolumeName_"+str(RANDOM_SEED)
    33         1          0.1      0.1      0.0      SAVE_REFLECTANCE = False
    34         1          0.1      0.1      0.0      SAVE_PHOTON_DIRECTION = False
    35                                           
    36                                               # If VISUALIZE is set to True, the simulation result will be plotted
    37                                           
    38         1          2.3      2.3      0.0      def create_example_tissue():
    39                                                   """
    40                                                   This is a very simple example script of how to create a tissue definition.
    41                                                   It contains a muscular background, an epidermis layer on top of the muscles
    42                                                   and a blood vessel.
    43                                                   """
    44                                                   background_dictionary = sp.Settings()
    45                                                   background_dictionary[Tags.MOLECULE_COMPOSITION] = sp.TISSUE_LIBRARY.constant(1e-4, 1e-4, 0.9)
    46                                                   background_dictionary[Tags.STRUCTURE_TYPE] = Tags.BACKGROUND
    47                                           
    48                                                   muscle_dictionary = sp.Settings()
    49                                                   muscle_dictionary[Tags.PRIORITY] = 1
    50                                                   muscle_dictionary[Tags.STRUCTURE_START_MM] = [0, 0, 10]
    51                                                   muscle_dictionary[Tags.STRUCTURE_END_MM] = [0, 0, 100]
    52                                                   muscle_dictionary[Tags.MOLECULE_COMPOSITION] = sp.TISSUE_LIBRARY.muscle()
    53                                                   muscle_dictionary[Tags.CONSIDER_PARTIAL_VOLUME] = True
    54                                                   muscle_dictionary[Tags.ADHERE_TO_DEFORMATION] = True
    55                                                   muscle_dictionary[Tags.STRUCTURE_TYPE] = Tags.HORIZONTAL_LAYER_STRUCTURE
    56                                           
    57                                                   vessel_1_dictionary = sp.Settings()
    58                                                   vessel_1_dictionary[Tags.PRIORITY] = 3
    59                                                   vessel_1_dictionary[Tags.STRUCTURE_START_MM] = [VOLUME_TRANSDUCER_DIM_IN_MM/2,
    60                                                                                                   10,
    61                                                                                                   VOLUME_HEIGHT_IN_MM/2]
    62                                                   vessel_1_dictionary[Tags.STRUCTURE_END_MM] = [VOLUME_TRANSDUCER_DIM_IN_MM/2,
    63                                                                                                 12,
    64                                                                                                 VOLUME_HEIGHT_IN_MM/2]
    65                                                   vessel_1_dictionary[Tags.STRUCTURE_RADIUS_MM] = 3
    66                                                   vessel_1_dictionary[Tags.MOLECULE_COMPOSITION] = sp.TISSUE_LIBRARY.blood()
    67                                                   vessel_1_dictionary[Tags.CONSIDER_PARTIAL_VOLUME] = True
    68                                                   vessel_1_dictionary[Tags.STRUCTURE_TYPE] = Tags.CIRCULAR_TUBULAR_STRUCTURE
    69                                           
    70                                                   epidermis_dictionary = sp.Settings()
    71                                                   epidermis_dictionary[Tags.PRIORITY] = 8
    72                                                   epidermis_dictionary[Tags.STRUCTURE_START_MM] = [0, 0, 9]
    73                                                   epidermis_dictionary[Tags.STRUCTURE_END_MM] = [0, 0, 10]
    74                                                   epidermis_dictionary[Tags.MOLECULE_COMPOSITION] = sp.TISSUE_LIBRARY.epidermis()
    75                                                   epidermis_dictionary[Tags.CONSIDER_PARTIAL_VOLUME] = True
    76                                                   epidermis_dictionary[Tags.ADHERE_TO_DEFORMATION] = True
    77                                                   epidermis_dictionary[Tags.STRUCTURE_TYPE] = Tags.HORIZONTAL_LAYER_STRUCTURE
    78                                           
    79                                                   tissue_dict = sp.Settings()
    80                                                   tissue_dict[Tags.BACKGROUND] = background_dictionary
    81                                                   tissue_dict["muscle"] = muscle_dictionary
    82                                                   tissue_dict["epidermis"] = epidermis_dictionary
    83                                                   tissue_dict["vessel_1"] = vessel_1_dictionary
    84                                                   return tissue_dict
    85                                           
    86                                           
    87                                               # Seed the numpy random configuration prior to creating the global_settings file in
    88                                               # order to ensure that the same volume
    89                                               # is generated with the same random seed every time.
    90                                           
    91         1         12.0     12.0      0.0      np.random.seed(RANDOM_SEED)
    92                                           
    93         1          1.0      1.0      0.0      general_settings = {
    94                                                   # These parameters set the general properties of the simulated volume
    95         1          0.3      0.3      0.0          Tags.RANDOM_SEED: RANDOM_SEED,
    96         1          0.3      0.3      0.0          Tags.VOLUME_NAME: VOLUME_NAME,
    97         1         52.2     52.2      0.0          Tags.SIMULATION_PATH: path_manager.get_hdf5_file_save_path(),
    98         1          0.4      0.4      0.0          Tags.SPACING_MM: SPACING,
    99         1          0.2      0.2      0.0          Tags.DIM_VOLUME_Z_MM: VOLUME_HEIGHT_IN_MM,
   100         1          0.2      0.2      0.0          Tags.DIM_VOLUME_X_MM: VOLUME_TRANSDUCER_DIM_IN_MM,
   101         1          0.1      0.1      0.0          Tags.DIM_VOLUME_Y_MM: VOLUME_PLANAR_DIM_IN_MM,
   102         1          0.3      0.3      0.0          Tags.WAVELENGTHS: [798],
   103         1          0.3      0.3      0.0          Tags.DO_FILE_COMPRESSION: True,
   104         1          0.2      0.2      0.0          Tags.GPU: True
   105                                               }
   106                                           
   107         1         15.1     15.1      0.0      settings = sp.Settings(general_settings)
   108                                           
   109         2          6.1      3.0      0.0      settings.set_volume_creation_settings({
   110         1          0.2      0.2      0.0          Tags.SIMULATE_DEFORMED_LAYERS: True,
   111         1      24443.6  24443.6      0.9          Tags.STRUCTURES: create_example_tissue()
   112                                               })
   113         2         68.8     34.4      0.0      settings.set_optical_settings({
   114         1          0.3      0.3      0.0          Tags.OPTICAL_MODEL_NUMBER_PHOTONS: 5e7,
   115         1         34.9     34.9      0.0          Tags.OPTICAL_MODEL_BINARY_PATH: path_manager.get_mcx_binary_path(),
   116         1          0.4      0.4      0.0          Tags.COMPUTE_DIFFUSE_REFLECTANCE: SAVE_REFLECTANCE,
   117         1          0.3      0.3      0.0          Tags.COMPUTE_PHOTON_DIRECTION_AT_EXIT: SAVE_PHOTON_DIRECTION
   118                                               })
   119         1         35.0     35.0      0.0      settings["noise_model_1"] = {
   120         1          0.4      0.4      0.0          Tags.NOISE_MEAN: 1.0,
   121         1          0.9      0.9      0.0          Tags.NOISE_STD: 0.1,
   122         1          0.6      0.6      0.0          Tags.NOISE_MODE: Tags.NOISE_MODE_MULTIPLICATIVE,
   123         1          0.5      0.5      0.0          Tags.DATA_FIELD: Tags.DATA_FIELD_INITIAL_PRESSURE,
   124         1          0.3      0.3      0.0          Tags.NOISE_NON_NEGATIVITY_CONSTRAINT: True
   125                                               }
   126                                           
   127         1          0.1      0.1      0.0      if not SAVE_REFLECTANCE and not SAVE_PHOTON_DIRECTION:
   128         1          0.2      0.2      0.0          pipeline = [
   129         1         69.8     69.8      0.0              sp.ModelBasedVolumeCreationAdapter(settings),
   130         1         10.0     10.0      0.0              sp.MCXAdapter(settings),
   131         1         46.4     46.4      0.0              sp.GaussianNoise(settings, "noise_model_1")
   132                                                   ]
   133                                               else:
   134                                                   pipeline = [
   135                                                       sp.ModelBasedVolumeCreationAdapter(settings),
   136                                                       sp.MCXAdapterReflectance(settings),
   137                                                   ]
   138                                           
   139                                           
   140         1         25.3     25.3      0.0      class ExampleDeviceSlitIlluminationLinearDetector(sp.PhotoacousticDevice):
   141                                                   """
   142                                                   This class represents a digital twin of a PA device with a slit as illumination next to a linear detection geometry.
   143                                           
   144                                                   """
   145                                           
   146                                                   def __init__(self):
   147                                                       super().__init__(device_position_mm=np.asarray([VOLUME_TRANSDUCER_DIM_IN_MM/2,
   148                                                                                                       VOLUME_PLANAR_DIM_IN_MM/2, 0]))
   149                                                       self.set_detection_geometry(sp.LinearArrayDetectionGeometry())
   150                                                       self.add_illumination_geometry(sp.SlitIlluminationGeometry(slit_vector_mm=[20, 0, 0],
   151                                                                                                                  direction_vector_mm=[0, 0, 1]))
   152                                           
   153                                           
   154         1         65.2     65.2      0.0      device = ExampleDeviceSlitIlluminationLinearDetector()
   155                                           
   156         1    2844852.2    3e+06     99.1      sp.simulate(pipeline, settings, device)
   157                                           
   158         1          3.7      3.7      0.0      if Tags.WAVELENGTH in settings:
   159         1          2.0      2.0      0.0          WAVELENGTH = settings[Tags.WAVELENGTH]
   160                                               else:
   161                                                   WAVELENGTH = 700
   162                                           
   163         1          0.2      0.2      0.0      if visualise:
   164                                                   sp.visualise_data(path_to_hdf5_file=path_manager.get_hdf5_file_save_path() + "/" + VOLUME_NAME + ".hdf5",
   165                                                                     wavelength=WAVELENGTH,
   166                                                                     show_initial_pressure=True,
   167                                                                     show_absorption=True,
   168                                                                     show_diffuse_reflectance=SAVE_REFLECTANCE,
   169                                                                     log_scale=True)

Total time: 1.76131 s
File: /home/f762e/Workspace/simpa/simpa_examples/minimal_optical_simulation_uniform_cube.py
Function: run_minimal_optical_simulation_uniform_cube at line 22

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    22                                           @profile
    23                                           def run_minimal_optical_simulation_uniform_cube(SPACING: Union[int, float] = 0.5, path_manager=sp.PathManager(),
    24                                                                                           visualise:bool = True):
    25                                               """
    26                                           
    27                                               :param SPACING: The simulation spacing between voxels
    28                                               :param path_manager: the path manager to be used, typically sp.PathManager
    29                                               :param visualise: If VISUALIZE is set to True, the reconstruction result will be plotted
    30                                               :return: a run through of the example
    31                                               """
    32         1          0.4      0.4      0.0      VOLUME_TRANSDUCER_DIM_IN_MM = 60
    33         1          0.1      0.1      0.0      VOLUME_PLANAR_DIM_IN_MM = 30
    34         1          0.3      0.3      0.0      VOLUME_HEIGHT_IN_MM = 60
    35         1          2.4      2.4      0.0      RANDOM_SEED = 471
    36         1          0.6      0.6      0.0      VOLUME_NAME = "MyVolumeName_"+str(RANDOM_SEED)
    37         1          0.2      0.2      0.0      SAVE_REFLECTANCE = True
    38         1          0.1      0.1      0.0      SAVE_PHOTON_DIRECTION = False
    39                                           
    40                                               # If VISUALIZE is set to True, the simulation result will be plotted
    41         1          0.1      0.1      0.0      VISUALIZE = True
    42                                           
    43                                           
    44         1          0.6      0.6      0.0      def create_example_tissue():
    45                                                   """
    46                                                   This is a very simple example script of how to create a tissue definition.
    47                                                   It contains only a generic background tissue material.
    48                                                   """
    49                                                   background_dictionary = sp.Settings()
    50                                                   background_dictionary[Tags.MOLECULE_COMPOSITION] = sp.TISSUE_LIBRARY.constant(1e-4, 1e-4, 0.9)
    51                                                   background_dictionary[Tags.STRUCTURE_TYPE] = Tags.BACKGROUND
    52                                           
    53                                                   tissue_dict = sp.Settings()
    54                                                   tissue_dict[Tags.BACKGROUND] = background_dictionary
    55                                                   return tissue_dict
    56                                           
    57                                           
    58                                               # Seed the numpy random configuration prior to creating the global_settings file in
    59                                               # order to ensure that the same volume
    60                                               # is generated with the same random seed every time.
    61                                           
    62         1         11.4     11.4      0.0      np.random.seed(RANDOM_SEED)
    63                                           
    64         1          0.9      0.9      0.0      general_settings = {
    65                                                   # These parameters set the general properties of the simulated volume
    66         1          0.8      0.8      0.0          Tags.RANDOM_SEED: RANDOM_SEED,
    67         1          0.3      0.3      0.0          Tags.VOLUME_NAME: VOLUME_NAME,
    68         1         52.4     52.4      0.0          Tags.SIMULATION_PATH: path_manager.get_hdf5_file_save_path(),
    69         1          1.0      1.0      0.0          Tags.SPACING_MM: SPACING,
    70         1          0.2      0.2      0.0          Tags.DIM_VOLUME_Z_MM: VOLUME_HEIGHT_IN_MM,
    71         1          0.3      0.3      0.0          Tags.DIM_VOLUME_X_MM: VOLUME_TRANSDUCER_DIM_IN_MM,
    72         1          0.2      0.2      0.0          Tags.DIM_VOLUME_Y_MM: VOLUME_PLANAR_DIM_IN_MM,
    73         1          0.3      0.3      0.0          Tags.WAVELENGTHS: [500],
    74         1          0.4      0.4      0.0          Tags.DO_FILE_COMPRESSION: True
    75                                               }
    76                                           
    77         1         14.5     14.5      0.0      settings = sp.Settings(general_settings)
    78                                           
    79         2          4.9      2.5      0.0      settings.set_volume_creation_settings({
    80         1       2299.6   2299.6      0.1          Tags.STRUCTURES: create_example_tissue()
    81                                               })
    82         2         71.8     35.9      0.0      settings.set_optical_settings({
    83         1          0.3      0.3      0.0          Tags.OPTICAL_MODEL_NUMBER_PHOTONS: 5e7,
    84         1         37.5     37.5      0.0          Tags.OPTICAL_MODEL_BINARY_PATH: path_manager.get_mcx_binary_path(),
    85         1          0.4      0.4      0.0          Tags.COMPUTE_DIFFUSE_REFLECTANCE: SAVE_REFLECTANCE,
    86         1          0.2      0.2      0.0          Tags.COMPUTE_PHOTON_DIRECTION_AT_EXIT: SAVE_PHOTON_DIRECTION
    87                                               })
    88                                           
    89         1          0.1      0.1      0.0      pipeline = [
    90         1         68.3     68.3      0.0          sp.ModelBasedVolumeCreationAdapter(settings),
    91         1         21.3     21.3      0.0          sp.MCXAdapterReflectance(settings),
    92                                               ]
    93                                           
    94         2         30.9     15.5      0.0      device = sp.PencilBeamIlluminationGeometry(device_position_mm=np.asarray([VOLUME_TRANSDUCER_DIM_IN_MM/2,
    95         1          0.1      0.1      0.0                                                                                VOLUME_PLANAR_DIM_IN_MM/2, 0]))
    96                                           
    97         1    1758689.2    2e+06     99.9      sp.simulate(pipeline, settings, device)
    98                                           
    99         1          0.3      0.3      0.0      if visualise:
   100                                                   sp.visualise_data(path_to_hdf5_file=path_manager.get_hdf5_file_save_path() + "/" + VOLUME_NAME + ".hdf5",
   101                                                                     wavelength=settings[Tags.WAVELENGTH],
   102                                                                     show_initial_pressure=True,
   103                                                                     show_absorption=True,
   104                                                                     show_diffuse_reflectance=SAVE_REFLECTANCE,
   105                                                                     log_scale=True)

Total time: 18.452 s
File: /home/f762e/Workspace/simpa/simpa_examples/msot_invision_simulation.py
Function: run_msot_invision_simulation at line 13

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    13                                           @profile
    14                                           def run_msot_invision_simulation(SPACING: Union[int, float] = 0.5, path_manager=sp.PathManager(), visualise:bool = True):
    15                                               """
    16                                           
    17                                               :param SPACING: The simulation spacing between voxels
    18                                               :param path_manager: the path manager to be used, typically sp.PathManager
    19                                               :param visualise: If VISUALIZE is set to True, the reconstruction result will be plotted
    20                                               :return: a run through of the example
    21                                               """
    22         1          0.3      0.3      0.0      SPEED_OF_SOUND = 1500
    23         1          0.2      0.2      0.0      XZ_DIM = 90
    24         1          0.2      0.2      0.0      Y_DIM = 40
    25                                           
    26         1          0.8      0.8      0.0      def create_pipeline(_settings: sp.Settings):
    27                                                   return [
    28                                                       sp.ModelBasedVolumeCreationAdapter(settings),
    29                                                       sp.MCXAdapter(settings),
    30                                                       sp.KWaveAdapter(settings),
    31                                                       sp.FieldOfViewCropping(settings),
    32                                                       sp.TimeReversalAdapter(settings)
    33                                                   ]
    34                                           
    35                                           
    36         1          0.7      0.7      0.0      def get_device():
    37                                                   pa_device = sp.InVision256TF(device_position_mm=np.asarray([XZ_DIM/2, Y_DIM/2, XZ_DIM/2]))
    38                                                   return pa_device
    39                                           
    40                                           
    41         1          0.3      0.3      0.0      def create_volume():
    42                                                   inclusion_material = sp.Molecule(volume_fraction=1.0,
    43                                                                                    anisotropy_spectrum=sp.AnisotropySpectrumLibrary.CONSTANT_ANISOTROPY_ARBITRARY(
    44                                                                                        0.9),
    45                                                                                    scattering_spectrum=sp.AnisotropySpectrumLibrary.CONSTANT_ANISOTROPY_ARBITRARY(
    46                                                                                        100.0),
    47                                                                                    absorption_spectrum=sp.AnisotropySpectrumLibrary.CONSTANT_ANISOTROPY_ARBITRARY(
    48                                                                                        4.0),
    49                                                                                    speed_of_sound=SPEED_OF_SOUND,
    50                                                                                    alpha_coefficient=1e-4,
    51                                                                                    density=1000,
    52                                                                                    gruneisen_parameter=1.0,
    53                                                                                    name="Inclusion")
    54                                           
    55                                                   phantom_material = sp.Molecule(volume_fraction=1.0,
    56                                                                                  anisotropy_spectrum=sp.AnisotropySpectrumLibrary.CONSTANT_ANISOTROPY_ARBITRARY(0.9),
    57                                                                                  scattering_spectrum=sp.AnisotropySpectrumLibrary.CONSTANT_ANISOTROPY_ARBITRARY(
    58                                                                                      100.0),
    59                                                                                  absorption_spectrum=sp.AnisotropySpectrumLibrary.CONSTANT_ANISOTROPY_ARBITRARY(0.05),
    60                                                                                  speed_of_sound=SPEED_OF_SOUND,
    61                                                                                  alpha_coefficient=1e-4,
    62                                                                                  density=1000,
    63                                                                                  gruneisen_parameter=1.0,
    64                                                                                  name="Phantom")
    65                                           
    66                                                   heavy_water = sp.Molecule(volume_fraction=1.0,
    67                                                                             anisotropy_spectrum=sp.AnisotropySpectrumLibrary.CONSTANT_ANISOTROPY_ARBITRARY(1.0),
    68                                                                             scattering_spectrum=sp.ScatteringSpectrumLibrary.CONSTANT_SCATTERING_ARBITRARY(0.1),
    69                                                                             absorption_spectrum=sp.AbsorptionSpectrumLibrary.CONSTANT_ABSORBER_ARBITRARY(1e-30),
    70                                                                             speed_of_sound=SPEED_OF_SOUND,
    71                                                                             alpha_coefficient=1e-4,
    72                                                                             density=1000,
    73                                                                             gruneisen_parameter=1.0,
    74                                                                             name="background_water")
    75                                           
    76                                                   background_dictionary = sp.Settings()
    77                                                   background_dictionary[Tags.MOLECULE_COMPOSITION] = (sp.MolecularCompositionGenerator()
    78                                                                                                       .append(heavy_water)
    79                                                                                                       .get_molecular_composition(segmentation_type=-1))
    80                                                   background_dictionary[Tags.STRUCTURE_TYPE] = Tags.BACKGROUND
    81                                           
    82                                                   phantom_material_dictionary = sp.Settings()
    83                                                   phantom_material_dictionary[Tags.PRIORITY] = 3
    84                                                   phantom_material_dictionary[Tags.STRUCTURE_START_MM] = [31, 0, 38]
    85                                                   phantom_material_dictionary[Tags.STRUCTURE_X_EXTENT_MM] = 28
    86                                                   phantom_material_dictionary[Tags.STRUCTURE_Y_EXTENT_MM] = 40
    87                                                   phantom_material_dictionary[Tags.STRUCTURE_Z_EXTENT_MM] = 14
    88                                                   phantom_material_dictionary[Tags.MOLECULE_COMPOSITION] = (sp.MolecularCompositionGenerator()
    89                                                                                                             .append(phantom_material)
    90                                                                                                             .get_molecular_composition(segmentation_type=0))
    91                                                   phantom_material_dictionary[Tags.CONSIDER_PARTIAL_VOLUME] = False
    92                                                   phantom_material_dictionary[Tags.STRUCTURE_TYPE] = Tags.RECTANGULAR_CUBOID_STRUCTURE
    93                                           
    94                                                   inclusion_1_dictionary = sp.Settings()
    95                                                   inclusion_1_dictionary[Tags.PRIORITY] = 8
    96                                                   inclusion_1_dictionary[Tags.STRUCTURE_START_MM] = [38, 10, 40]
    97                                                   inclusion_1_dictionary[Tags.STRUCTURE_X_EXTENT_MM] = 2
    98                                                   inclusion_1_dictionary[Tags.STRUCTURE_Y_EXTENT_MM] = 20
    99                                                   inclusion_1_dictionary[Tags.STRUCTURE_Z_EXTENT_MM] = 10
   100                                                   inclusion_1_dictionary[Tags.MOLECULE_COMPOSITION] = (sp.MolecularCompositionGenerator()
   101                                                                                                        .append(inclusion_material)
   102                                                                                                        .get_molecular_composition(segmentation_type=1))
   103                                                   inclusion_1_dictionary[Tags.CONSIDER_PARTIAL_VOLUME] = False
   104                                                   inclusion_1_dictionary[Tags.STRUCTURE_TYPE] = Tags.RECTANGULAR_CUBOID_STRUCTURE
   105                                           
   106                                                   inclusion_2_dictionary = sp.Settings()
   107                                                   inclusion_2_dictionary[Tags.PRIORITY] = 5
   108                                                   inclusion_2_dictionary[Tags.STRUCTURE_START_MM] = [50, 0, 43]
   109                                                   inclusion_2_dictionary[Tags.STRUCTURE_END_MM] = [50, 40, 43]
   110                                                   inclusion_2_dictionary[Tags.STRUCTURE_RADIUS_MM] = 2
   111                                                   inclusion_2_dictionary[Tags.MOLECULE_COMPOSITION] = (sp.MolecularCompositionGenerator()
   112                                                                                                        .append(inclusion_material)
   113                                                                                                        .get_molecular_composition(segmentation_type=2))
   114                                                   inclusion_2_dictionary[Tags.CONSIDER_PARTIAL_VOLUME] = False
   115                                                   inclusion_2_dictionary[Tags.STRUCTURE_TYPE] = Tags.CIRCULAR_TUBULAR_STRUCTURE
   116                                           
   117                                                   tissue_dict = sp.Settings()
   118                                                   tissue_dict[Tags.BACKGROUND] = background_dictionary
   119                                                   tissue_dict["phantom"] = phantom_material_dictionary
   120                                                   tissue_dict["inclusion_1"] = inclusion_1_dictionary
   121                                                   tissue_dict["inclusion_2"] = inclusion_2_dictionary
   122                                                   return {
   123                                                       Tags.STRUCTURES: tissue_dict,
   124                                                       Tags.SIMULATE_DEFORMED_LAYERS: False
   125                                                   }
   126                                           
   127                                           
   128         1          0.3      0.3      0.0      def get_settings():
   129                                                   general_settings = {
   130                                                       # These parameters set the general properties of the simulated volume
   131                                                       Tags.RANDOM_SEED: 4711,
   132                                                       Tags.VOLUME_NAME: "InVision Simulation Example",
   133                                                       Tags.SIMULATION_PATH: path_manager.get_hdf5_file_save_path(),
   134                                                       Tags.SPACING_MM: SPACING,
   135                                                       Tags.DIM_VOLUME_Z_MM: XZ_DIM,
   136                                                       Tags.DIM_VOLUME_X_MM: XZ_DIM,
   137                                                       Tags.DIM_VOLUME_Y_MM: Y_DIM,
   138                                                       Tags.VOLUME_CREATOR: Tags.VOLUME_CREATOR_VERSATILE,
   139                                                       Tags.GPU: True,
   140                                                       Tags.WAVELENGTHS: [700]
   141                                                   }
   142                                           
   143                                                   volume_settings = create_volume()
   144                                           
   145                                                   optical_settings = {
   146                                                       Tags.OPTICAL_MODEL_NUMBER_PHOTONS: 1e7,
   147                                                       Tags.OPTICAL_MODEL_BINARY_PATH: path_manager.get_mcx_binary_path(),
   148                                                       Tags.ILLUMINATION_TYPE: Tags.ILLUMINATION_TYPE_MSOT_INVISION,
   149                                                       Tags.LASER_PULSE_ENERGY_IN_MILLIJOULE: 50,
   150                                                   }
   151                                           
   152                                                   acoustic_settings = {
   153                                                       Tags.ACOUSTIC_SIMULATION_3D: True,
   154                                                       Tags.ACOUSTIC_MODEL_BINARY_PATH: path_manager.get_matlab_binary_path(),
   155                                                       Tags.KWAVE_PROPERTY_ALPHA_POWER: 0.00,
   156                                                       Tags.KWAVE_PROPERTY_SENSOR_RECORD: "p",
   157                                                       Tags.KWAVE_PROPERTY_PMLInside: False,
   158                                                       Tags.KWAVE_PROPERTY_PMLSize: [31, 32],
   159                                                       Tags.KWAVE_PROPERTY_PMLAlpha: 1.5,
   160                                                       Tags.KWAVE_PROPERTY_PlotPML: False,
   161                                                       Tags.RECORDMOVIE: False,
   162                                                       Tags.MOVIENAME: "visualization_log",
   163                                                       Tags.ACOUSTIC_LOG_SCALE: True
   164                                                   }
   165                                           
   166                                                   reconstruction_settings = {
   167                                                       Tags.RECONSTRUCTION_PERFORM_BANDPASS_FILTERING: False,
   168                                                       Tags.TUKEY_WINDOW_ALPHA: 0.5,
   169                                                       Tags.RECONSTRUCTION_BMODE_AFTER_RECONSTRUCTION: False,
   170                                                       Tags.RECONSTRUCTION_BMODE_METHOD: Tags.RECONSTRUCTION_BMODE_METHOD_HILBERT_TRANSFORM,
   171                                                       Tags.RECONSTRUCTION_APODIZATION_METHOD: Tags.RECONSTRUCTION_APODIZATION_HAMMING,
   172                                                       Tags.RECONSTRUCTION_MODE: Tags.RECONSTRUCTION_MODE_PRESSURE,
   173                                                       Tags.DATA_FIELD_SPEED_OF_SOUND: SPEED_OF_SOUND,
   174                                                       Tags.KWAVE_PROPERTY_SENSOR_RECORD: "p",
   175                                                       Tags.KWAVE_PROPERTY_PMLInside: False,
   176                                                       Tags.KWAVE_PROPERTY_PMLSize: [31, 32],
   177                                                       Tags.KWAVE_PROPERTY_PMLAlpha: 1.5,
   178                                                       Tags.KWAVE_PROPERTY_PlotPML: False,
   179                                                       Tags.RECORDMOVIE: False,
   180                                                       Tags.MOVIENAME: "visualization_log",
   181                                                       Tags.ACOUSTIC_LOG_SCALE: True,
   182                                                       Tags.ACOUSTIC_MODEL_BINARY_PATH: path_manager.get_matlab_binary_path(),
   183                                                       Tags.KWAVE_PROPERTY_ALPHA_POWER: 0.00,
   184                                                       Tags.SPACING_MM: 0.25,
   185                                                   }
   186                                           
   187                                                   _settings = sp.Settings(general_settings)
   188                                                   _settings.set_volume_creation_settings(volume_settings)
   189                                                   _settings.set_optical_settings(optical_settings)
   190                                                   _settings.set_acoustic_settings(acoustic_settings)
   191                                                   _settings.set_reconstruction_settings(reconstruction_settings)
   192                                                   return _settings
   193                                           
   194                                           
   195         1        251.3    251.3      0.0      device = get_device()
   196         1        620.1    620.1      0.0      settings = get_settings()
   197         1        213.8    213.8      0.0      pipeline = create_pipeline(settings)
   198                                           
   199         1   18450957.5    2e+07    100.0      sp.simulate(simulation_pipeline=pipeline, digital_device_twin=device, settings=settings)
   200                                           
   201         1          0.3      0.3      0.0      if visualise:
   202                                                   sp.visualise_data(settings=settings,
   203                                                                     path_manager=path_manager,
   204                                                                     show_absorption=True,
   205                                                                     show_initial_pressure=True,
   206                                                                     show_reconstructed_data=True,
   207                                                                     show_xz_only=True)

Total time: 9.57549 s
File: /home/f762e/Workspace/simpa/simpa_examples/optical_and_acoustic_simulation.py
Function: run_optical_and_acoustic_simulation at line 18

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    18                                           @profile
    19                                           def run_optical_and_acoustic_simulation(SPACING: Union[int, float] = 0.2, path_manager=sp.PathManager(),
    20                                                                                visualise: bool = True):
    21                                               """
    22                                           
    23                                               :param SPACING: The simulation spacing between voxels
    24                                               :param path_manager: the path manager to be used, typically sp.PathManager
    25                                               :param visualise: If VISUALIZE is set to True, the reconstruction result will be plotted
    26                                               :return: a run through of the example
    27                                               """
    28         1          0.3      0.3      0.0      VOLUME_TRANSDUCER_DIM_IN_MM = 75
    29         1          0.1      0.1      0.0      VOLUME_PLANAR_DIM_IN_MM = 20
    30         1          0.1      0.1      0.0      VOLUME_HEIGHT_IN_MM = 25
    31         1          0.1      0.1      0.0      RANDOM_SEED = 4711
    32                                           
    33                                               # If VISUALIZE is set to True, the simulation result will be plotted
    34         1          0.1      0.1      0.0      VISUALIZE = True
    35                                           
    36         1          0.8      0.8      0.0      def create_example_tissue():
    37                                                   """
    38                                                   This is a very simple example script of how to create a tissue definition.
    39                                                   It contains a muscular background, an epidermis layer on top of the muscles
    40                                                   and a blood vessel.
    41                                                   """
    42                                                   background_dictionary = sp.Settings()
    43                                                   background_dictionary[Tags.MOLECULE_COMPOSITION] = sp.TISSUE_LIBRARY.constant(1e-10, 1e-10, 1.0)
    44                                                   background_dictionary[Tags.STRUCTURE_TYPE] = Tags.BACKGROUND
    45                                           
    46                                                   tissue_dict = sp.Settings()
    47                                                   tissue_dict[Tags.BACKGROUND] = background_dictionary
    48                                                   tissue_dict["muscle"] = sp.define_horizontal_layer_structure_settings(z_start_mm=0, thickness_mm=100,
    49                                                                                                                         molecular_composition=sp.TISSUE_LIBRARY.constant(
    50                                                                                                                             0.05, 100, 0.9),
    51                                                                                                                         priority=1,
    52                                                                                                                         consider_partial_volume=True,
    53                                                                                                                         adhere_to_deformation=True)
    54                                                   tissue_dict["epidermis"] = sp.define_horizontal_layer_structure_settings(z_start_mm=1, thickness_mm=0.1,
    55                                                                                                                            molecular_composition=sp.TISSUE_LIBRARY.epidermis(),
    56                                                                                                                            priority=8,
    57                                                                                                                            consider_partial_volume=True,
    58                                                                                                                            adhere_to_deformation=True)
    59                                                   tissue_dict["vessel_1"] = sp.define_circular_tubular_structure_settings(
    60                                                       tube_start_mm=[VOLUME_TRANSDUCER_DIM_IN_MM/2 - 10, 0, 5],
    61                                                       tube_end_mm=[VOLUME_TRANSDUCER_DIM_IN_MM/2 - 10, VOLUME_PLANAR_DIM_IN_MM, 5],
    62                                                       molecular_composition=sp.TISSUE_LIBRARY.blood(),
    63                                                       radius_mm=2, priority=3, consider_partial_volume=True,
    64                                                       adhere_to_deformation=False
    65                                                   )
    66                                                   tissue_dict["vessel_2"] = sp.define_circular_tubular_structure_settings(
    67                                                       tube_start_mm=[VOLUME_TRANSDUCER_DIM_IN_MM/2, 0, 10],
    68                                                       tube_end_mm=[VOLUME_TRANSDUCER_DIM_IN_MM/2, VOLUME_PLANAR_DIM_IN_MM, 10],
    69                                                       molecular_composition=sp.TISSUE_LIBRARY.blood(),
    70                                                       radius_mm=3, priority=3, consider_partial_volume=True,
    71                                                       adhere_to_deformation=False
    72                                                   )
    73                                                   return tissue_dict
    74                                           
    75                                           
    76                                               # Seed the numpy random configuration prior to creating the global_settings file in
    77                                               # order to ensure that the same volume
    78                                               # is generated with the same random seed every time.
    79                                           
    80         1         12.7     12.7      0.0      np.random.seed(RANDOM_SEED)
    81         1          0.6      0.6      0.0      VOLUME_NAME = "CompletePipelineTestMSOT_"+str(RANDOM_SEED)
    82                                           
    83         1          1.5      1.5      0.0      general_settings = {
    84                                                   # These parameters set the general properties of the simulated volume
    85         1          0.4      0.4      0.0          Tags.RANDOM_SEED: RANDOM_SEED,
    86         1          0.6      0.6      0.0          Tags.VOLUME_NAME: "CompletePipelineExample_" + str(RANDOM_SEED),
    87         1         54.4     54.4      0.0          Tags.SIMULATION_PATH: path_manager.get_hdf5_file_save_path(),
    88         1          0.8      0.8      0.0          Tags.SPACING_MM: SPACING,
    89         1          0.2      0.2      0.0          Tags.DIM_VOLUME_Z_MM: VOLUME_HEIGHT_IN_MM,
    90         1          0.3      0.3      0.0          Tags.DIM_VOLUME_X_MM: VOLUME_TRANSDUCER_DIM_IN_MM,
    91         1          0.3      0.3      0.0          Tags.DIM_VOLUME_Y_MM: VOLUME_PLANAR_DIM_IN_MM,
    92         1          0.9      0.9      0.0          Tags.VOLUME_CREATOR: Tags.VOLUME_CREATOR_VERSATILE,
    93         1          0.4      0.4      0.0          Tags.GPU: True,
    94         1          0.4      0.4      0.0          Tags.WAVELENGTHS: [700, 800],
    95         1          0.2      0.2      0.0          Tags.DO_FILE_COMPRESSION: True,
    96         1          0.4      0.4      0.0          Tags.DO_IPASC_EXPORT: True
    97                                               }
    98         1         19.6     19.6      0.0      settings = sp.Settings(general_settings)
    99         1          2.4      2.4      0.0      np.random.seed(RANDOM_SEED)
   100                                           
   101         2          8.7      4.4      0.0      settings.set_volume_creation_settings({
   102         1      24130.3  24130.3      0.3          Tags.STRUCTURES: create_example_tissue(),
   103         1          0.5      0.5      0.0          Tags.SIMULATE_DEFORMED_LAYERS: True
   104                                               })
   105                                           
   106         2          8.7      4.4      0.0      settings.set_optical_settings({
   107         1          0.3      0.3      0.0          Tags.OPTICAL_MODEL_NUMBER_PHOTONS: 1e7,
   108         1         46.8     46.8      0.0          Tags.OPTICAL_MODEL_BINARY_PATH: path_manager.get_mcx_binary_path(),
   109         1          1.0      1.0      0.0          Tags.ILLUMINATION_TYPE: Tags.ILLUMINATION_TYPE_MSOT_ACUITY_ECHO,
   110         1          0.2      0.2      0.0          Tags.LASER_PULSE_ENERGY_IN_MILLIJOULE: 50,
   111         1          0.3      0.3      0.0          Tags.MCX_ASSUMED_ANISOTROPY: 0.9,
   112                                               })
   113                                           
   114         2         14.3      7.1      0.0      settings.set_acoustic_settings({
   115         1          0.2      0.2      0.0          Tags.ACOUSTIC_SIMULATION_3D: False,
   116         1         35.7     35.7      0.0          Tags.ACOUSTIC_MODEL_BINARY_PATH: path_manager.get_matlab_binary_path(),
   117         1          0.4      0.4      0.0          Tags.KWAVE_PROPERTY_ALPHA_POWER: 0.00,
   118         1          0.3      0.3      0.0          Tags.KWAVE_PROPERTY_SENSOR_RECORD: "p",
   119         1          0.2      0.2      0.0          Tags.KWAVE_PROPERTY_PMLInside: False,
   120         1          0.4      0.4      0.0          Tags.KWAVE_PROPERTY_PMLSize: [31, 32],
   121         1          0.2      0.2      0.0          Tags.KWAVE_PROPERTY_PMLAlpha: 1.5,
   122         1          0.3      0.3      0.0          Tags.KWAVE_PROPERTY_PlotPML: False,
   123         1          0.3      0.3      0.0          Tags.RECORDMOVIE: False,
   124         1          0.4      0.4      0.0          Tags.MOVIENAME: "visualization_log",
   125         1          0.3      0.3      0.0          Tags.ACOUSTIC_LOG_SCALE: True
   126                                               })
   127                                           
   128        19        129.9      6.8      0.0      settings.set_reconstruction_settings({
   129         1          0.7      0.7      0.0          Tags.RECONSTRUCTION_PERFORM_BANDPASS_FILTERING: False,
   130         1         37.8     37.8      0.0          Tags.ACOUSTIC_MODEL_BINARY_PATH: path_manager.get_matlab_binary_path(),
   131         1          0.1      0.1      0.0          Tags.ACOUSTIC_SIMULATION_3D: False,
   132         1          0.1      0.1      0.0          Tags.KWAVE_PROPERTY_ALPHA_POWER: 0.00,
   133         1          0.7      0.7      0.0          Tags.TUKEY_WINDOW_ALPHA: 0.5,
   134         1          0.4      0.4      0.0          Tags.BANDPASS_CUTOFF_LOWPASS_IN_HZ: int(8e6),
   135         1          0.4      0.4      0.0          Tags.BANDPASS_CUTOFF_HIGHPASS_IN_HZ: int(0.1e4),
   136         1          0.1      0.1      0.0          Tags.RECONSTRUCTION_BMODE_AFTER_RECONSTRUCTION: False,
   137         1          0.5      0.5      0.0          Tags.RECONSTRUCTION_BMODE_METHOD: Tags.RECONSTRUCTION_BMODE_METHOD_HILBERT_TRANSFORM,
   138         1          1.0      1.0      0.0          Tags.RECONSTRUCTION_APODIZATION_METHOD: Tags.RECONSTRUCTION_APODIZATION_BOX,
   139         1          0.5      0.5      0.0          Tags.RECONSTRUCTION_MODE: Tags.RECONSTRUCTION_MODE_PRESSURE,
   140         1          0.2      0.2      0.0          Tags.KWAVE_PROPERTY_SENSOR_RECORD: "p",
   141         1          0.1      0.1      0.0          Tags.KWAVE_PROPERTY_PMLInside: False,
   142         1          0.2      0.2      0.0          Tags.KWAVE_PROPERTY_PMLSize: [31, 32],
   143         1          0.1      0.1      0.0          Tags.KWAVE_PROPERTY_PMLAlpha: 1.5,
   144         1          0.1      0.1      0.0          Tags.KWAVE_PROPERTY_PlotPML: False,
   145         1          0.1      0.1      0.0          Tags.RECORDMOVIE: False,
   146         1          0.1      0.1      0.0          Tags.MOVIENAME: "visualization_log",
   147         1          0.1      0.1      0.0          Tags.ACOUSTIC_LOG_SCALE: True,
   148         1          0.3      0.3      0.0          Tags.DATA_FIELD_SPEED_OF_SOUND: 1540,
   149         1          0.2      0.2      0.0          Tags.DATA_FIELD_ALPHA_COEFF: 0.01,
   150         1          0.2      0.2      0.0          Tags.DATA_FIELD_DENSITY: 1000,
   151         1          0.3      0.3      0.0          Tags.SPACING_MM: SPACING
   152                                               })
   153                                           
   154         1         34.3     34.3      0.0      settings["noise_initial_pressure"] = {
   155         1          0.3      0.3      0.0          Tags.NOISE_MEAN: 1,
   156         1          0.2      0.2      0.0          Tags.NOISE_STD: 0.01,
   157         1          0.4      0.4      0.0          Tags.NOISE_MODE: Tags.NOISE_MODE_MULTIPLICATIVE,
   158         1          0.6      0.6      0.0          Tags.DATA_FIELD: Tags.DATA_FIELD_INITIAL_PRESSURE,
   159         1          0.2      0.2      0.0          Tags.NOISE_NON_NEGATIVITY_CONSTRAINT: True
   160                                               }
   161                                           
   162         1         33.1     33.1      0.0      settings["noise_time_series"] = {
   163         1          0.1      0.1      0.0          Tags.NOISE_STD: 1,
   164         1          0.5      0.5      0.0          Tags.NOISE_MODE: Tags.NOISE_MODE_ADDITIVE,
   165         1          0.2      0.2      0.0          Tags.DATA_FIELD: Tags.DATA_FIELD_TIME_SERIES_DATA
   166                                               }
   167                                           
   168                                               # TODO: For the device choice, uncomment the undesired device
   169                                           
   170                                               # device = sp.MSOTAcuityEcho(device_position_mm=np.array([VOLUME_TRANSDUCER_DIM_IN_MM/2,
   171                                               #                                                      VOLUME_PLANAR_DIM_IN_MM/2,
   172                                               #                                                      0]))
   173                                               # device.update_settings_for_use_of_model_based_volume_creator(settings)
   174                                           
   175         3         11.1      3.7      0.0      device = sp.PhotoacousticDevice(device_position_mm=np.array([VOLUME_TRANSDUCER_DIM_IN_MM/2,
   176         1          0.4      0.4      0.0                                                                   VOLUME_PLANAR_DIM_IN_MM/2,
   177         1          0.1      0.1      0.0                                                                   0]),
   178         1          1.3      1.3      0.0                                      field_of_view_extent_mm=np.asarray([-15, 15, 0, 0, 0, 20]))
   179         2         26.6     13.3      0.0      device.set_detection_geometry(sp.LinearArrayDetectionGeometry(device_position_mm=device.device_position_mm,
   180         1          0.1      0.1      0.0                                                                    pitch_mm=0.25,
   181         1          0.1      0.1      0.0                                                                    number_detector_elements=100,
   182         1          0.8      0.8      0.0                                                                    field_of_view_extent_mm=np.asarray([-15, 15, 0, 0, 0, 20])))
   183         1       1748.6   1748.6      0.0      print(device.get_detection_geometry().get_detector_element_positions_base_mm())
   184         1         36.8     36.8      0.0      device.add_illumination_geometry(sp.SlitIlluminationGeometry(slit_vector_mm=[100, 0, 0]))
   185                                           
   186                                           
   187         1          0.2      0.2      0.0      SIMULATION_PIPELINE = [
   188         1         93.7     93.7      0.0          sp.ModelBasedVolumeCreationAdapter(settings),
   189         1          9.9      9.9      0.0          sp.MCXAdapter(settings),
   190         1         50.1     50.1      0.0          sp.GaussianNoise(settings, "noise_initial_pressure"),
   191         1          5.3      5.3      0.0          sp.KWaveAdapter(settings),
   192         1         46.5     46.5      0.0          sp.GaussianNoise(settings, "noise_time_series"),
   193         1          5.4      5.4      0.0          sp.TimeReversalAdapter(settings),
   194         1        125.6    125.6      0.0          sp.FieldOfViewCropping(settings)
   195                                               ]
   196                                           
   197         1    9548734.8    1e+07     99.7      sp.simulate(SIMULATION_PIPELINE, settings, device)
   198                                           
   199                                               if Tags.WAVELENGTH in settings:
   200                                                   WAVELENGTH = settings[Tags.WAVELENGTH]
   201                                               else:
   202                                                   WAVELENGTH = 700
   203                                           
   204                                               if visualise:
   205                                                   sp.visualise_data(path_to_hdf5_file=settings[Tags.SIMPA_OUTPUT_PATH],
   206                                                                     wavelength=WAVELENGTH,
   207                                                                     show_time_series_data=True,
   208                                                                     show_initial_pressure=True,
   209                                                                     show_reconstructed_data=True,
   210                                                                     log_scale=False,
   211                                                                     show_xz_only=False)

Total time: 10.4913 s
File: /home/f762e/Workspace/simpa/simpa_examples/perform_iterative_qPAI_reconstruction.py
Function: run_perform_iterative_qPAI_reconstruction at line 25

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    25                                           @profile
    26                                           def run_perform_iterative_qPAI_reconstruction(SPACING: Union[int, float] = 0.2, path_manager=sp.PathManager(), visualise:bool = True):
    27                                               """
    28                                           
    29                                               :param SPACING: The simulation spacing between voxels
    30                                               :param path_manager: the path manager to be used, typically sp.PathManager
    31                                               :param visualise: If VISUALIZE is set to True, the reconstruction result will be plotted
    32                                               :return: a run through of the example
    33                                               """
    34         1          0.3      0.3      0.0      VOLUME_TRANSDUCER_DIM_IN_MM = 30
    35         1          0.1      0.1      0.0      VOLUME_PLANAR_DIM_IN_MM = 30
    36         1          0.1      0.1      0.0      VOLUME_HEIGHT_IN_MM = 30
    37         1          0.1      0.1      0.0      RANDOM_SEED = 471
    38         1          0.6      0.6      0.0      VOLUME_NAME = "MyqPAIReconstruction_" + str(RANDOM_SEED)
    39                                           
    40                                               # If VISUALIZE is set to True, the reconstruction result will be plotted
    41                                           
    42         1          0.5      0.5      0.0      def create_example_tissue():
    43                                                   """
    44                                                   This is a very simple example script of how to create a tissue definition.
    45                                                   It contains a muscular background, an epidermis layer on top of the muscles
    46                                                   and a blood vessel.
    47                                                   """
    48                                                   background_dictionary = sp.Settings()
    49                                                   background_dictionary[Tags.MOLECULE_COMPOSITION] = sp.TISSUE_LIBRARY.constant(0.05, 30, 0.9)
    50                                                   background_dictionary[Tags.STRUCTURE_TYPE] = Tags.BACKGROUND
    51                                           
    52                                                   epidermis_structure = sp.Settings()
    53                                                   epidermis_structure[Tags.PRIORITY] = 1
    54                                                   epidermis_structure[Tags.STRUCTURE_START_MM] = [0, 0, 2]
    55                                                   epidermis_structure[Tags.STRUCTURE_END_MM] = [0, 0, 2.5]
    56                                                   epidermis_structure[Tags.MOLECULE_COMPOSITION] = sp.TISSUE_LIBRARY.constant(2.2, 100.0, 0.9)
    57                                                   epidermis_structure[Tags.CONSIDER_PARTIAL_VOLUME] = True
    58                                                   epidermis_structure[Tags.ADHERE_TO_DEFORMATION] = True
    59                                                   epidermis_structure[Tags.STRUCTURE_TYPE] = Tags.HORIZONTAL_LAYER_STRUCTURE
    60                                           
    61                                                   vessel_structure_1 = sp.Settings()
    62                                                   vessel_structure_1[Tags.PRIORITY] = 2
    63                                                   vessel_structure_1[Tags.STRUCTURE_START_MM] = [VOLUME_TRANSDUCER_DIM_IN_MM / 2.5, 0,
    64                                                                                                  VOLUME_HEIGHT_IN_MM / 2]
    65                                                   vessel_structure_1[Tags.STRUCTURE_END_MM] = [VOLUME_TRANSDUCER_DIM_IN_MM / 2.5,
    66                                                                                                VOLUME_PLANAR_DIM_IN_MM, VOLUME_HEIGHT_IN_MM / 2]
    67                                                   vessel_structure_1[Tags.STRUCTURE_RADIUS_MM] = 1.75
    68                                                   vessel_structure_1[Tags.STRUCTURE_ECCENTRICITY] = 0.85
    69                                                   vessel_structure_1[Tags.MOLECULE_COMPOSITION] = sp.TISSUE_LIBRARY.constant(5.2, 100.0, 0.9)
    70                                                   vessel_structure_1[Tags.CONSIDER_PARTIAL_VOLUME] = True
    71                                                   vessel_structure_1[Tags.ADHERE_TO_DEFORMATION] = True
    72                                                   vessel_structure_1[Tags.STRUCTURE_TYPE] = Tags.ELLIPTICAL_TUBULAR_STRUCTURE
    73                                           
    74                                                   vessel_structure_2 = sp.Settings()
    75                                                   vessel_structure_2[Tags.PRIORITY] = 3
    76                                                   vessel_structure_2[Tags.STRUCTURE_START_MM] = [VOLUME_TRANSDUCER_DIM_IN_MM / 2, 0,
    77                                                                                                  VOLUME_HEIGHT_IN_MM / 3]
    78                                                   vessel_structure_2[Tags.STRUCTURE_END_MM] = [VOLUME_TRANSDUCER_DIM_IN_MM / 2,
    79                                                                                                VOLUME_PLANAR_DIM_IN_MM, VOLUME_HEIGHT_IN_MM / 3]
    80                                                   vessel_structure_2[Tags.STRUCTURE_RADIUS_MM] = 0.75
    81                                                   vessel_structure_2[Tags.MOLECULE_COMPOSITION] = sp.TISSUE_LIBRARY.constant(3.0, 100.0, 0.9)
    82                                                   vessel_structure_2[Tags.CONSIDER_PARTIAL_VOLUME] = True
    83                                                   vessel_structure_2[Tags.STRUCTURE_TYPE] = Tags.CIRCULAR_TUBULAR_STRUCTURE
    84                                           
    85                                                   tissue_dict = sp.Settings()
    86                                                   tissue_dict[Tags.BACKGROUND] = background_dictionary
    87                                                   tissue_dict["epidermis"] = epidermis_structure
    88                                                   tissue_dict["vessel_1"] = vessel_structure_1
    89                                                   tissue_dict["vessel_2"] = vessel_structure_2
    90                                                   return tissue_dict
    91                                           
    92                                           
    93                                               # set settings for volume creation, optical simulation and iterative qPAI method
    94         1         11.9     11.9      0.0      np.random.seed(RANDOM_SEED)
    95                                           
    96         1          0.9      0.9      0.0      general_settings = {
    97                                                   # These parameters set the general properties of the simulated volume
    98         1          0.4      0.4      0.0          Tags.RANDOM_SEED: RANDOM_SEED,
    99         1          0.2      0.2      0.0          Tags.VOLUME_NAME: VOLUME_NAME,
   100         1         65.3     65.3      0.0          Tags.SIMULATION_PATH: path_manager.get_hdf5_file_save_path(),
   101         1          0.7      0.7      0.0          Tags.SPACING_MM: SPACING,
   102         1          0.3      0.3      0.0          Tags.DIM_VOLUME_Z_MM: VOLUME_HEIGHT_IN_MM,
   103         1          0.3      0.3      0.0          Tags.DIM_VOLUME_X_MM: VOLUME_TRANSDUCER_DIM_IN_MM,
   104         1          0.1      0.1      0.0          Tags.DIM_VOLUME_Y_MM: VOLUME_PLANAR_DIM_IN_MM,
   105         1          0.2      0.2      0.0          Tags.WAVELENGTHS: [700]
   106                                               }
   107                                           
   108         1         15.7     15.7      0.0      settings = sp.Settings(general_settings)
   109                                           
   110         2          8.8      4.4      0.0      settings.set_volume_creation_settings({
   111                                                   # These parameters set the properties for the volume creation
   112         1          0.2      0.2      0.0          Tags.SIMULATE_DEFORMED_LAYERS: True,
   113         1       9337.6   9337.6      0.1          Tags.STRUCTURES: create_example_tissue()
   114                                               })
   115         2         10.2      5.1      0.0      settings.set_optical_settings({
   116                                                   # These parameters set the properties for the optical Monte Carlo simulation
   117         1          0.6      0.6      0.0          Tags.OPTICAL_MODEL_NUMBER_PHOTONS: 1e7,
   118         1         45.7     45.7      0.0          Tags.OPTICAL_MODEL_BINARY_PATH: path_manager.get_mcx_binary_path(),
   119         1          1.0      1.0      0.0          Tags.OPTICAL_MODEL: Tags.OPTICAL_MODEL_MCX,
   120         1          0.6      0.6      0.0          Tags.LASER_PULSE_ENERGY_IN_MILLIJOULE: 50
   121                                               })
   122         1         38.7     38.7      0.0      settings["noise_model"] = {
   123         1          0.3      0.3      0.0          Tags.NOISE_MEAN: 1.0,
   124         1          0.3      0.3      0.0          Tags.NOISE_STD: 0.01,
   125         1          0.5      0.5      0.0          Tags.NOISE_MODE: Tags.NOISE_MODE_MULTIPLICATIVE,
   126         1          0.5      0.5      0.0          Tags.DATA_FIELD: Tags.DATA_FIELD_INITIAL_PRESSURE,
   127         1          0.3      0.3      0.0          Tags.NOISE_NON_NEGATIVITY_CONSTRAINT: True
   128                                               }
   129         1         42.5     42.5      0.0      settings["iterative_qpai_reconstruction"] = {
   130                                                   # These parameters set the properties of the iterative reconstruction
   131         1          0.6      0.6      0.0          Tags.DOWNSCALE_FACTOR: 0.75,
   132         1          0.5      0.5      0.0          Tags.ITERATIVE_RECONSTRUCTION_CONSTANT_REGULARIZATION: False,
   133                                                   # the following tag has no effect, since the regularization is chosen to be SNR dependent, not constant
   134         1          0.3      0.3      0.0          Tags.ITERATIVE_RECONSTRUCTION_REGULARIZATION_SIGMA: 0.01,
   135         1          0.4      0.4      0.0          Tags.ITERATIVE_RECONSTRUCTION_MAX_ITERATION_NUMBER: 20,
   136                                                   # for this example, we are not interested in all absorption updates
   137         1          0.6      0.6      0.0          Tags.ITERATIVE_RECONSTRUCTION_SAVE_INTERMEDIATE_RESULTS: False,
   138         1          3.2      3.2      0.0          Tags.ITERATIVE_RECONSTRUCTION_STOPPING_LEVEL: 1e-3
   139                                               }
   140                                           
   141                                               # run pipeline including iterative qPAI method
   142         1          0.1      0.1      0.0      pipeline = [
   143         1         68.3     68.3      0.0          sp.ModelBasedVolumeCreationAdapter(settings),
   144         1         10.1     10.1      0.0          sp.MCXAdapter(settings),
   145         1         42.2     42.2      0.0          sp.GaussianNoise(settings, "noise_model"),
   146         1         18.3     18.3      0.0          sp.IterativeqPAI(settings, "iterative_qpai_reconstruction")
   147                                               ]
   148                                           
   149                                           
   150         1         24.4     24.4      0.0      class CustomDevice(sp.PhotoacousticDevice):
   151                                           
   152                                                   def __init__(self):
   153                                                       super(CustomDevice, self).__init__(device_position_mm=np.asarray([general_settings[Tags.DIM_VOLUME_X_MM] / 2,
   154                                                                                                                         general_settings[Tags.DIM_VOLUME_Y_MM] / 2,
   155                                                                                                                         0]))
   156                                                       self.add_illumination_geometry(sp.DiskIlluminationGeometry(beam_radius_mm=20))
   157                                           
   158                                           
   159         1         53.2     53.2      0.0      device = CustomDevice()
   160                                           
   161         1          0.8      0.8      0.0      device.update_settings_for_use_of_model_based_volume_creator(settings)
   162                                           
   163         1   10481453.4    1e+07     99.9      sp.simulate(pipeline, settings, device)
   164                                           
   165                                               # visualize reconstruction results
   166         1          0.6      0.6      0.0      if visualise:
   167                                                   # get simulation output
   168                                                   data_path = path_manager.get_hdf5_file_save_path() + "/" + VOLUME_NAME + ".hdf5"
   169                                                   settings = sp.load_data_field(data_path, Tags.SETTINGS)
   170                                                   wavelength = settings[Tags.WAVELENGTHS][0]
   171                                           
   172                                                   # get reconstruction result
   173                                                   absorption_reconstruction = sp.load_data_field(data_path, Tags.ITERATIVE_qPAI_RESULT, wavelength)
   174                                           
   175                                                   # get ground truth absorption coefficients
   176                                                   absorption_gt = sp.load_data_field(data_path, Tags.DATA_FIELD_ABSORPTION_PER_CM, wavelength)
   177                                           
   178                                                   # rescale ground truth to same dimension as reconstruction (necessary due to resampling in iterative algorithm)
   179                                                   scale = np.shape(absorption_reconstruction)[0] / np.shape(absorption_gt)[0]  # same as Tags.DOWNSCALE_FACTOR
   180                                                   absorption_gt = zoom(absorption_gt, scale, order=1, mode="nearest")
   181                                           
   182                                                   # compute reconstruction error
   183                                                   difference = absorption_gt - absorption_reconstruction
   184                                           
   185                                                   median_error = np.median(difference)
   186                                                   q3, q1 = np.percentile(difference, [75, 25])
   187                                                   iqr = q3 - q1
   188                                           
   189                                                   # visualize results
   190                                                   x_pos = int(np.shape(absorption_gt)[0] / 2)
   191                                                   y_pos = int(np.shape(absorption_gt)[1] / 2)
   192                                           
   193                                                   if np.min(absorption_gt) > np.min(absorption_reconstruction):
   194                                                       cmin = np.min(absorption_reconstruction)
   195                                                   else:
   196                                                       cmin = np.min(absorption_gt)
   197                                           
   198                                                   if np.max(absorption_gt) > np.max(absorption_reconstruction):
   199                                                       cmax = np.max(absorption_gt)
   200                                                   else:
   201                                                       cmax = np.max(absorption_reconstruction)
   202                                           
   203                                                   results_x_z = [absorption_gt[:, y_pos, :], absorption_reconstruction[:, y_pos, :], difference[:, y_pos, :]]
   204                                                   results_y_z = [absorption_gt[x_pos, :, :], absorption_reconstruction[x_pos, :, :], difference[x_pos, :, :]]
   205                                           
   206                                                   label = ["Absorption coefficients: ${\mu_a}^{gt}$", "Reconstruction: ${\mu_a}^{reconstr.}$",
   207                                                            "Difference: ${\mu_a}^{gt} - {\mu_a}^{reconstr.}$"]
   208                                           
   209                                                   plt.figure(figsize=(20, 15))
   210                                                   plt.subplots_adjust(hspace=0.5)
   211                                                   plt.suptitle("Iterative qPAI Reconstruction \n median error = " + str(np.round(median_error, 4)) +
   212                                                                "\n IQR = " + str(np.round(iqr, 4)), fontsize=10)
   213                                           
   214                                                   for i, quantity in enumerate(results_x_z):
   215                                                       plt.subplot(2, len(results_x_z), i + 1)
   216                                                       if i == 0:
   217                                                           plt.ylabel("x-z", fontsize=10)
   218                                                       plt.title(label[i], fontsize=10)
   219                                                       plt.imshow(quantity.T)
   220                                                       plt.xticks(fontsize=6)
   221                                                       plt.yticks(fontsize=6)
   222                                                       plt.colorbar()
   223                                                       if i != 2:
   224                                                           plt.clim(cmin, cmax)
   225                                                       else:
   226                                                           plt.clim(np.min(difference), np.max(difference))
   227                                           
   228                                                   for i, quantity in enumerate(results_y_z):
   229                                                       plt.subplot(2, len(results_x_z), i + len(results_x_z) + 1)
   230                                                       if i == 0:
   231                                                           plt.ylabel("y-z", fontsize=10)
   232                                                       plt.title(label[i], fontsize=10)
   233                                                       plt.imshow(quantity.T)
   234                                                       plt.xticks(fontsize=6)
   235                                                       plt.yticks(fontsize=6)
   236                                                       plt.colorbar()
   237                                                       if i != 2:
   238                                                           plt.clim(cmin, cmax)
   239                                                       else:
   240                                                           plt.clim(np.min(difference), np.max(difference))
   241                                           
   242                                                   plt.show()
   243                                                   plt.close()

